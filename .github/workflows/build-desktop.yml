name: build

#
# Create some files with script/new-artifact.sh and confirm they are properly packaged and uploaded
# as artifacts with the actions.
#
# This is tested on all OS platforms where we have hosted runners.
#

on:
  push:
    branches:
      - main
  pull_request:

jobs:

  build:
   name: Build
    
  strategy:
    matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

   runs-on: ${{ matrix.os }}
  
     steps:
       # runs-on: ubuntu-latest
      - name: Checkout
      - uses: actions/checkout@v2

      - name: Setup Node
      - uses: actions/setup-node@v1
        with:
          node-version: '18'
      - run: npm ci
      - run: npm run lint
      - run: npm run build

      - name: Setup just
      - uses: actions/checkout@v2

    uses: ./
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  - name: Test
    run: |
      [ "$(just --justfile tests/Justfile)" = "Test..." ]
    shell: bash

  test-version:
    needs: test-latest
    strategy:
      matrix:
        just-version: [0.5.11, 0.6.1, 0.7.3, 0.8.7, 0.9.9, 0.10.7, 0.11.2, 1.5.0]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run self
      uses: ./
      with:
        just-version: ${{ matrix.just-version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Check version
      run: just --version | grep -E "^just v?${{ matrix.just-version }}$"
    - name: Test
      run: |
        [ "$(just --justfile tests/Justfile)" = "Test..." ]
        
   build:
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Generate files
      run: mkdir build && chmod +x ./make.sh
      shell: bash

    - name: Upload Pages artifact
      uses: ./
      with:
        path: build

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
          name: github-pages
          path: artifact2

    - name: Extract artifact
      run: tar -xf artifact2/artifact.tar -C artifact2 && rm artifact2/artifact.tar
      shell: bash

    - name: Compare files
      run: diff -qr artifact artifact2
      shell: bash

    - name: Check for absence of symlinks
      run: if [ $(find artifact2 -type l | wc -l) != 0 ]; then echo "Symlinks found"; exit 1; fi
      shell: bash
